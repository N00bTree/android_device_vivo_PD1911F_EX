import /init.recovery.${ro.hardware}.rc
import /init.recovery.wifi.rc
import /init.recovery.touch.rc

on early-init
    # Set the security context of /postinstall if present.
    restorecon /postinstall

    start ueventd

on init
    export PATH /sbin:/system/bin

    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc
    symlink /sbin/toybox /sbin/cat
    symlink /sbin/toybox /sbin/ln
    symlink /sbin/toybox /sbin/ls
    symlink /sbin/toybox /sbin/mkdir
    symlink /sbin/vivotool /sbin/ping
    symlink /sbin/toybox /sbin/ps
    symlink /sbin/toybox /sbin/grep
    symlink /sbin/toybox /sbin/chmod
    symlink /sbin/toybox /sbin/setprop
    symlink /sbin/toybox /sbin/getprop
    symlink /sbin/toybox /sbin/setenforce
    symlink /sbin/toybox /sbin/mount
    symlink /sbin/toybox /sbin/rm
    symlink /sbin/toybox /sbin/gunzip
    symlink /sbin/toybox /sbin/tar
    symlink /sbin/toybox /sbin/chown

    mount cgroup none /acct cpuacct
    mkdir /acct/uid

    mkdir /sdcard
    mkdir /otg
    mkdir /external_sd
    mkdir /system
    mkdir /system_root/system

    symlink /sbin /system_root/system/bin
    symlink /sbin/linker /system_root/system/bin/linker
    symlink /sbin/linker64 /system_root/system/bin/linker64
    symlink /sbin/sh /system_root/system/bin/sh
    symlink /sbin/debuggerd64 /system_root/system/bin/debuggerd64

    mkdir /sbin/lib 0777 root root
    mkdir /sbin/lib64 0777 root root
    symlink /sbin/lib  /system_root/system/lib
    symlink /sbin/lib64 /system_root/system/lib64
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    chmod 0770 /sbin/sh

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on property:ro.boot.configfs=*
   #Set up configfs
   mount configfs none /config
   mkdir /config/usb_gadget/g1 0770 shell shell
   mkdir /configiusb_gadget/g1/strings/0x409 0770 shell shell
   write /configiusb_gadget/g1/bcdUSB 0x0200
   write /config/usb_gadget/g1/os_desc/use 1
   write /config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}
   write /config/usb_gadget/g1/strings/0x409/manufacturer ${ro.product.manufacturer}
   write /config/usb_gadget/g1/strings/0x409/product ${ro.product.model}
   mkdir /config/usb_gadget/g1/functions/ffs.adb
   mkdir /config/usb_gadget/g1/configs/b.1 0770 shell shell
   mkdir /config/usb_gadget/g1/configs/b.1/strings/0x409 0770 shell shell
   write /config/usb_gadget/g1/os_desc/b_vendor_code 0x1
   write /config/usb_gadget/g1/os_desc/qw_sign "MSFT100"
   symlink /config/usb_gadget/g1/configs/b.1 /config/usb_gadget/g1/os_desc/b.1
   mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

on fs
    wait /dev/block/platform/soc/${ro.boot.bootdevice}
    symlink /dev/block/platform/soc/${ro.boot.bootdevice} /dev/block/bootdevice

    wait /dev/block/bootdevice/by-name/oem
    mount ext4 /dev/block/bootdevice/by-name/oem /oem ro barrier=1 discard


    mount debugfs debugfs /sys/kernel/debug
    write /sys/class/android_usb/android0/f_ffs/aliases adb
    mkdir /dev/usb-ffs 0770 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 18D1
    write /sys/class/android_usb/android0/idProduct D001
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_system_props_action
    load_system_props

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_system_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service charger /charger -r
    critical
    seclabel u:r:charger:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service debuggerd64 /system/bin/debuggerd64
    group root readproc
    writepid /dev/cpuset/system-background/tasks
    seclabel u:r:recovery:s0

service keymaster-3-0 /sbin/android.hardware.keymaster@3.0-service-qti
    disabled
    user root
    group root drmrpc
    seclabel u:r:recovery:s0

service keymaster-4-0 /sbin/android.hardware.keymaster@4.0-service-qti
    disabled
    user root
    group root drmrpc
    seclabel u:r:recovery:s0

service gatekeeper-1-0 /sbin/android.hardware.gatekeeper@1.0-service-qti
    disabled
    user root
    group root
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 770 root root
    seclabel u:r:adbd:s0

#miaoqiang add for uncrypt device
service qseecomd /sbin/qseecomd
    disabled
    user root
    group root
    seclabel u:r:recovery:s0

service servicemanager /sbin/servicemanager
    disabled
    user root
    seclabel u:r:recovery:s0

service hwservicemanager /sbin/hwservicemanager
    disabled
    user root
    onrestart setprop hwservicemanager.ready false
    onrestart class_restart hal
    onrestart class_restart early_hal
    writepid /dev/cpuset/system-background/tasks
    seclabel u:r:recovery:s0

service wait_for_keymaster  /sbin/wait_for_keymaster
    disabled
    user root
    seclabel u:r:recovery:s0

service logd /sbin/logd
    socket logd stream 0666 logd logd
    socket logdr seqpacket 0666 logd logd
    socket logdw dgram+passcred 0222 logd logd
    file /proc/kmsg r
    file /dev/kmsg w
    user root
    group root logd system package_info readproc
    writepid /dev/cpuset/system-background/tasks
    seclabel u:r:recovery:s0

service logd-reinit /sbin/logd --reinit
    oneshot
    disabled
    user root
    group root logd
    writepid /dev/cpuset/system-background/tasks
    seclabel u:r:recovery:s0

# set the property not too early, or the qseecomd may not used
on property:recovery.qseecomd=1
    start qseecomd

on property:recovery.service=1
    start servicemanager
    start hwservicemanager
    start keymaster-4-0
    start wait_for_keymaster
    start gatekeeper-1-0

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd

on property:ro.boot.usbcontroller=*
    setprop sys.usb.controller ${ro.boot.usbcontroller}

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    write /config/usb_gadget/g1/UDC "none"
    restart adbd
    write /sys/class/android_usb/android0/enable 1


on property:sys.usb.ffs.ready=1
    rm /config/usb_gadget/g1/configs/b.1/f1
    rm /config/usb_gadget/g1/configs/b.1/f2
    rm /config/usb_gadget/g1/configs/b.1/f3
    rm /config/usb_gadget/g1/configs/b.1/f4
    rm /config/usb_gadget/g1/configs/b.1/f5
    write /config/usb_gadget/g1/configs/b.1/strings/0x409/configuration "adb"
    write /config/usb_gadget/g1/idVendor 0x18d1
    write /config/usb_gadget/g1/idProduct 0xd001
    symlink /config/usb_gadget/g1/functions/ffs.adb /config/usb_gadget/g1/configs/b.1/f1
    write /sys/class/android_usb/android0/enable 1
    write /config/usb_gadget/g1/UDC ${sys.usb.controller}
